<?php

/**
 * @license LGPLv3, http://opensource.org/licenses/LGPL-3.0
 * @copyright Aimeos (aimeos.org), 2019
 */

$enc = $this->encoder();


/** client/html/account/index/url/target
 * Destination of the URL where the controller specified in the URL is known
 *
 * The destination can be a page ID like in a content management system or the
 * module of a software development framework. This "target" must contain or know
 * the controller that should be called by the generated URL.
 *
 * @param string Destination of the URL
 * @since 2019.07
 * @category Developer
 * @see client/html/account/index/url/controller
 * @see client/html/account/index/url/action
 * @see client/html/account/index/url/config
 */
$target = $this->config( 'client/html/account/index/url/target' );

/** client/html/account/index/url/controller
 * Name of the controller whose action should be called
 *
 * In Model-View-Controller (MVC) applications, the controller contains the methods
 * that create parts of the output displayed in the generated HTML page. Controller
 * names are usually alpha-numeric.
 *
 * @param string Name of the controller
 * @since 2019.07
 * @category Developer
 * @see client/html/account/index/url/target
 * @see client/html/account/index/url/action
 * @see client/html/account/index/url/config
 */
$controller = $this->config( 'client/html/account/index/url/controller', 'account' );

/** client/html/account/index/url/action
 * Name of the action that should create the output
 *
 * In Model-View-Controller (MVC) applications, actions are the methods of a
 * controller that create parts of the output displayed in the generated HTML page.
 * Action names are usually alpha-numeric.
 *
 * @param string Name of the action
 * @since 2019.07
 * @category Developer
 * @see client/html/account/index/url/target
 * @see client/html/account/index/url/controller
 * @see client/html/account/index/url/config
 */
$action = $this->config( 'client/html/account/index/url/action', 'index' );

/** client/html/account/index/url/config
 * Associative list of configuration options used for generating the URL
 *
 * You can specify additional options as key/value pairs used when generating
 * the URLs, like
 *
 *  client/html/account/index/url/config = ['absoluteUri' => true]
 *
 * The available key/value pairs depend on the application that embeds the e-commerce
 * framework. This is because the infrastructure of the application is used for
 * generating the URLs. The full list of available config options is referenced
 * in the "see also" section of this page.
 *
 * @param string Associative list of configuration options
 * @since 2019.07
 * @category Developer
 * @see client/html/account/index/url/target
 * @see client/html/account/index/url/controller
 * @see client/html/account/index/url/action
 */
$config = $this->config( 'client/html/account/index/url/config', ['absoluteUri' => 1] );

/** client/html/account/index/url/filter
 * Removes parameters for the detail page before generating the URL
 *
 * For SEO, it's nice to have URLs which contains only required parameters.
 * This setting removes the listed parameters from the URLs. Keep care to
 * remove no required parameters!
 *
 * @param array List of parameter names to remove
 * @since 2019.07
 * @category User
 * @category Developer
 * @see client/html/account/index/url/target
 * @see client/html/account/index/url/controller
 * @see client/html/account/index/url/action
 * @see client/html/account/index/url/config
 */


?>
<?php $this->block()->start( 'email/account/html' ) ?>
<mjml>
	<mj-head>
		<mj-title><?= $enc->html( $this->translate( 'client', 'Your new account' ), $enc::TRUST ) ?></mj-title>
		<mj-style>
			<?= $this->get( 'htmlCss' ) ?>
		</mj-style>
	</mj-head>
	<mj-body css-class="aimeos">
		<mj-section>
			<mj-column>
				<mj-image css-class="logo" src="<?= $this->get( 'htmlLogo' ) ?>" align="center"/>
			</mj-column>
		</mj-section>
		<mj-section>
			<mj-column>
				<mj-text css-class="email-common-salutation">
					<?= $enc->html( $this->get( 'emailIntro' ) ) ?>
				</mj-text>
				<mj-text css-class="email-common-intro">
					<?= $enc->html( nl2br( $this->translate( 'client', 'An account has been created for you.' ) ), $enc::TRUST ) ?>
				</mj-text>
			</mj-column>
		</mj-section>
		<mj-wrapper css-class="account-detail">
			<mj-section css-class="account-code" padding="inherit">
				<mj-column>
					<mj-text css-class="name">
						<?= $enc->html( $this->translate( 'client', 'Account' ), $enc::TRUST ) ?>:
					</mj-text>
				</mj-column>
				<mj-column>
					<mj-text css-class="value">
						<?= $enc->html( $this->extAccountCode, $enc::TRUST ) ?>
					</mj-text>
				</mj-column>
			</mj-section>
			<mj-section css-class="account-password" padding="inherit">
				<mj-column>
					<mj-text css-class="name">
						<?= $enc->html( $this->translate( 'client', 'Password' ), $enc::TRUST ) ?>:
					</mj-text>
				</mj-column>
				<mj-column>
					<mj-text css-class="value">
						<?= $enc->html( $this->get( 'extAccountPassword' ) ?: $this->translate( 'client', 'Like entered by you' ) ) ?>
					</mj-text>
				</mj-column>
			</mj-section>
			<mj-section css-class="account-login">
				<mj-column>
					<mj-button css-class="btn btn-primary" background-color="inherit" color="inherit"
						href="<?= $enc->attr( $this->url( $target, $controller, $action, ['locale' => $this->extAddressItem->getLanguageId()], [], $config ) ) ?>">
						<?= $enc->html( $this->translate( 'client', 'Login' ), $enc::TRUST ) ?>
					</mj-button>
				</mj-column>
			</mj-section>
		</mj-wrapper>
		<mj-section css-class="email-common-outro">
			<mj-column>
				<mj-text>
					<?= $enc->html( nl2br( $this->translate( 'client', 'If you have any questions, please reply to this e-mail' ) ), $enc::TRUST ) ?>
				</mj-text>
			</mj-column>
		</mj-section>
	</mj-body>
</mjml>
<?php $this->block()->stop() ?>
<?= $this->block()->get( 'email/account/html' ) ?>
